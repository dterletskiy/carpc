# AR           Программа работы с архивами; по умолчанию, `ar'. 
# AS           Ассемблер; по умолчанию, `as'. 
# CC           Компилятор Си; по умолчанию, `cc'. 
# CXX          Компилятор C++; по умолчанию, `g++'. 
# CO           Программа для извлечения файлов из RCS; по умолчанию, `co'. 
# CPP          Препроцессор языка Си, выдающий результат на стандартный вывод; по умолчанию, `$(CC) -E'. 
# FC           Препроцессор и компилятор для Фортрана и Ратфора; по умолчанию, `f77'. 
# GET          Программа для извлечения файлов из SCCS; по умолчанию, `get'. 
# LEX          Программа для преобразования Lex-грамматики в текст на языках Си или Ратфор; по умолчанию - `lex'. 
# PC           Компилятор Паскаля; по умолчанию, `pc'. 
# YACC         Программа для преобразования Yacc-грамматики в текст на Си; по умолчанию - `yacc'. 
# YACCR        Программа для преобразования Yacc-грамматики в текст на языке Ратфор; по умолчанию - `yacc -r'. 
# MAKEINFO     Программа для преобразования исходного файла формата Texinfo в файл формата Info; по умолчанию, `makeinfo'. 
# TEX          Программа для преобразования исходных файлов на TeX в файлы формата DVI; по умолчанию - `tex'. 
# TEXI2DVI     Программа, преобразующая исходные файлы в формате Texinfo, в DVI-файлы программы TeX; по умолчанию - `texi2dvi'. 
# WEAVE        Программа, преобразующая текст из формата Web в формат TeX; по умолчанию - `weave'. 
# CWEAVE       Программа, преобразующая текст на Си-Web в формат TeX; по умолчанию - `cweave'. 
# TANGLE       Программа, преобразующая текст на Web в Паскаль; по умолчанию - `tangle'. 
# CTANGLE      Программа, преобразующая текст на Си-Web в текст на Си; по умолчанию - `ctangle'. 
# RM           Команда удаления файла; по умолчанию, `rm -f'. 


MEMORY_HOOK := 0
ACTIVE_SYS_TRACE := 1
ACTIVE_DBG_TRACE := 1






TIME := $(shell date +"%H-%M-%S")
DATE := $(shell date +"%Y-%m-%d")

DEBUGGER       := lldb
DISASSEMBLER   := objdump
TAR            := tar


###########################################
#                                         #
#           Project extentions            #
#                                         #
###########################################
# File extentions
SRC_EXT         := cpp
SRC_PIC_EXT     := pic.cpp
DEP_EXT         := d
DEP_PIC_EXT     := pic.d
OBJ_EXT         := o
OBJ_PIC_EXT     := pic.o


###########################################
#                                         #
#          Project make targets           #
#                                         #
###########################################
TARGET_BUILD            := build
TARGET_EXECUTE          := execute
TARGET_GENERATE         := generate
TARGET_CLEAN            := clean
TARGET_INFO             := info
TARGET_ARCHIVE          := archive
TARGET_DEBUG            := debug
TARGET_DISASSM          := disassm

###########################################
#                                         #
#           Project directories           #
#                                         #
###########################################
PROJECT_NAME                  := RPC
ROOT_DIR                      := $(PWD)

PROJECT_FRAMEWORK_NAME        := framework
PROJECT_FRAMEWORK_DIR         := $(ROOT_DIR)/$(PROJECT_FRAMEWORK_NAME)
PRODUCT_FRAMEWORK_DIR         := $(PROJECT_FRAMEWORK_DIR)_product
FRAMEWORK_MAKE_PARAMS         := PROJECT_NAME=$(PROJECT_FRAMEWORK_NAME) PROJECT_DIR=$(PROJECT_FRAMEWORK_DIR) PRODUCT_DIR=$(PRODUCT_FRAMEWORK_DIR)

PROJECT_SERVICEBROCKER_NAME   := servicebrocker
PROJECT_SERVICEBROCKER_DIR    := $(ROOT_DIR)/$(PROJECT_SERVICEBROCKER_NAME)
PRODUCT_SERVICEBROCKER_DIR    := $(PROJECT_SERVICEBROCKER_DIR)_product
SERVICEBROCKER_MAKE_PARAMS    := PROJECT_NAME=$(PROJECT_SERVICEBROCKER_NAME) PROJECT_DIR=$(PROJECT_SERVICEBROCKER_DIR) PRODUCT_DIR=$(PRODUCT_SERVICEBROCKER_DIR)

PROJECT_HOOKS_NAME            := hooks
PROJECT_HOOKS_DIR             := $(ROOT_DIR)/$(PROJECT_HOOKS_NAME)
PRODUCT_HOOKS_DIR             := $(PROJECT_HOOKS_DIR)_product
HOOKS_MAKE_PARAMS             := PROJECT_NAME=$(PROJECT_HOOKS_NAME) PROJECT_DIR=$(PROJECT_HOOKS_DIR) PRODUCT_DIR=$(PRODUCT_HOOKS_DIR)

PROJECT_APPLICATION_NAME      := application
PROJECT_APPLICATION_DIR       := $(ROOT_DIR)/$(PROJECT_APPLICATION_NAME)
PRODUCT_APPLICATION_DIR       := $(PROJECT_APPLICATION_DIR)_product
APPLICATION_MAKE_PARAMS       := PROJECT_NAME=$(PROJECT_APPLICATION_NAME) PROJECT_DIR=$(PROJECT_APPLICATION_DIR) PRODUCT_DIR=$(PRODUCT_APPLICATION_DIR)

PROJECT_CORE_NAME             := core
PROJECT_CORE_DIR              := $(ROOT_DIR)/$(PROJECT_CORE_NAME)
PRODUCT_CORE_DIR              := $(PROJECT_CORE_DIR)_product
CORE_MAKE_PARAMS              := PROJECT_NAME=$(PROJECT_CORE_NAME) PROJECT_DIR=$(PROJECT_CORE_DIR) PRODUCT_DIR=$(PRODUCT_CORE_DIR)

PROJECT_CONTROLLER_NAME       := controller
PROJECT_CONTROLLER_DIR        := $(ROOT_DIR)/$(PROJECT_CONTROLLER_NAME)
PRODUCT_CONTROLLER_DIR        := $(PROJECT_CONTROLLER_DIR)_product
CONTROLLER_MAKE_PARAMS        := PROJECT_NAME=$(PROJECT_CONTROLLER_NAME) PROJECT_DIR=$(PROJECT_CONTROLLER_DIR) PRODUCT_DIR=$(PRODUCT_CONTROLLER_DIR)

PROJECT_HMI_NAME              := hmi
PROJECT_HMI_DIR               := $(ROOT_DIR)/$(PROJECT_HMI_NAME)
PRODUCT_HMI_DIR               := $(PROJECT_HMI_DIR)_product
HMI_MAKE_PARAMS               := PROJECT_NAME=$(PROJECT_HMI_NAME) PROJECT_DIR=$(PROJECT_HMI_DIR) PRODUCT_DIR=$(PRODUCT_HMI_DIR)

PROJECT_EXPERIMENTAL_NAME     := experimental
PROJECT_EXPERIMENTAL_DIR      := $(ROOT_DIR)/$(PROJECT_EXPERIMENTAL_NAME)
PRODUCT_EXPERIMENTAL_DIR      := $(PROJECT_EXPERIMENTAL_DIR)_product
EXPERIMENTAL_MAKE_PARAMS      := PROJECT_NAME=$(PROJECT_EXPERIMENTAL_NAME) PROJECT_DIR=$(PROJECT_EXPERIMENTAL_DIR) PRODUCT_DIR=$(PRODUCT_EXPERIMENTAL_DIR)





###########################################
#                                         #
#        Project buld configuration       #
#                                         #
###########################################
# Include directories
INCLUDE      := -I/usr/local/include

CONSTANTS    := -DLINUX=0 -DANDROID=1 -DWINDOWS=2 -DSTD=3 -DOS=LINUX

CCONFIG      := -DCOLORED_TRACE
ifeq ($(MEMORY_HOOK),1)
   CCONFIG += -DHOOK_MEMORY_ALLOCATOR
endif
ifeq ($(ACTIVE_SYS_TRACE),1)
   CCONFIG += -DSYS_TRACE
endif
ifeq ($(ACTIVE_DBG_TRACE),1)
   CCONFIG += -DDBG_TRACE
endif

CFLAGS       += $(CXXFLAGS)
CFLAGS       += -std=c++17 $(CONSTANTS) $(CCONFIG)
# CFLAGS       += -time
# CFLAGS       += -fopenmp
CFLAGS       += -Wall
# CFLAGS       += -Wextra
# CFLAGS       += -O3
# CFLAGS       += -g3 -ggdb -rdynamic

LDFLAGS      += -lrt -ldl -v
# LDFLAGS      += -fopenmp
# LDFLAGS      += -lm
# LDFLAGS      += -larmadillo
# LDFLAGS      += -lprotobuf
ifeq ($(MEMORY_HOOK),1)
   LDFLAGS += -L$(PRODUCT_HOOKS_DIR)/lib -lhooks
endif



###########################################
#                                         #
#                Functions                #
#                                         #
###########################################
define create_directories
   @echo "Create directories: " $(1)
   @mkdir -p $(1)
endef

define delete_directories
   @echo "Delete directories: " $(1)
   @rm -rf $(1)
endef

define compile
   @echo "---------------------------------------------------------"
   @echo "Compiling..."
   @echo "   Compiler:   " $(1)
   @echo "   Flags:      " $(2)
   @echo "   Includes:   " $(3)
   @echo "   Object:     " $(4)
   @echo "   Source:     " $(5)
   $(call create_directories,$(dir $(4)))
   $(1) $(2) $(3) -c -o $(4) $(5)
   @echo "---------------------------------------------------------"
endef

define generate
   @echo "---------------------------------------------------------"
   @echo "Generating..."
   @echo "   Compiler:   " $(1)
   @echo "   Flags:      " $(2)
   @echo "   Includes:   " $(3)
   @echo "   Object:     " $(4)
   @echo "   Source:     " $(5)
   $(call create_directories,$(dir $(4)))
   $(1) $(2) $(3) -E -o $(4) $(5)
   @echo "---------------------------------------------------------"
endef

define link
   @echo "---------------------------------------------------------"
   @echo "Linkin..."
   @echo "   Compiler:   " $(1)
   @echo "   Flags:      " $(2)
   @echo "   Executeble: " $(3)
   @echo "   Objects:    " $(4)
   $(1) -o $(3) $(4) $(2)
   @echo "---------------------------------------------------------"
endef

define build_source_list
endef

define print_info
   @echo "###########################################################"
   @echo "#                                                       '#'"
   @echo "            information:  '$(1)'"
   @echo "#                                                       '#'"
   @echo "###########################################################"
   @echo PROJECT_NAME: $(1)
   @echo PROJECT_DIR: $(2)
   @echo PRODUCT_DIR: $(3)
   @echo --------------- Source files ---------------
   @echo $(4)
   @echo -------------- Generated files -------------
   @echo $(5)
   @echo --------------- Object files ---------------
   @echo $(6)
   @echo ------------- Object PIC files -------------
   @echo $(7)
   @echo --------------------------------------------
endef

define test
   $(1) := 111
endef
