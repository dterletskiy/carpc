# links:
# https://stackoverflow.com/questions/1146973/how-do-i-revert-all-local-changes-in-git-managed-project-to-previous-state
# https://stackoverflow.com/questions/40503417/how-to-add-a-file-to-the-last-commit-in-git



# Revert changes made to your working copy, do this:
git checkout .

# Revert changes made to the index (i.e., that you have added), do this. Warning this will reset all of your unpushed commits to master!:
git reset

# Revert a change that you have committed, do this:
git revert <commit 1> <commit 2>

# Remove untracked files (e.g., new files, generated files):
git clean -f

# Remove untracked directories (e.g., new or automatically generated directories):
git clean -fd

# Add files to last commit:
git add the_left_out_file
git commit --amend --no-edit

# Revert all changes to latest baseline:
git reset --hard

# Diff between file in HEAD and file in transaction:
git diff --cached changelog.log

# Checkout latest comit in the branch:
git checkout <branch_name>

# To go to the most recent commit:
git checkout $(git log --branches -1 --pretty=format:"%H")
# Explanation:
# git log --branches shows log of commits from all local branches
# -1 limit to one commit â†’ most recent commit
# --pretty=format:"%H" format to only show commit hash
# git checkout $(...) use output of subshell as argument for checkout

# Show all branches and commit
git log --branches --oneline

# Show last commit
git log --branches -1 --oneline

# Show before last commit
git log --branches -2 --oneline

# To see what other commits your HEAD (or any other ref) has pointed to in the past:
git reflog
