// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorData.proto

#include "SensorData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SensorData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarData_SensorData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoPosition_SensorData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Offset3D_SensorData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignData_SensorData_2eproto;
namespace com {
namespace tda {
namespace sensor {
namespace protos {
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class GeoPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPosition> _instance;
} _GeoPosition_default_instance_;
class Offset3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Offset3D> _instance;
} _Offset3D_default_instance_;
class SignDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignData> _instance;
} _SignData_default_instance_;
class CarDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarData> _instance;
} _CarData_default_instance_;
class GeneralDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralData> _instance;
} _GeneralData_default_instance_;
}  // namespace protos
}  // namespace sensor
}  // namespace tda
}  // namespace com
static void InitDefaultsscc_info_CarData_SensorData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::tda::sensor::protos::_CarData_default_instance_;
    new (ptr) ::com::tda::sensor::protos::CarData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::tda::sensor::protos::CarData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarData_SensorData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CarData_SensorData_2eproto}, {}};

static void InitDefaultsscc_info_GeneralData_SensorData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::tda::sensor::protos::_GeneralData_default_instance_;
    new (ptr) ::com::tda::sensor::protos::GeneralData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::tda::sensor::protos::GeneralData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeneralData_SensorData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeneralData_SensorData_2eproto}, {
      &scc_info_CarData_SensorData_2eproto.base,
      &scc_info_SignData_SensorData_2eproto.base,}};

static void InitDefaultsscc_info_GeoPosition_SensorData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::tda::sensor::protos::_GeoPosition_default_instance_;
    new (ptr) ::com::tda::sensor::protos::GeoPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::tda::sensor::protos::GeoPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoPosition_SensorData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoPosition_SensorData_2eproto}, {}};

static void InitDefaultsscc_info_Offset3D_SensorData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::tda::sensor::protos::_Offset3D_default_instance_;
    new (ptr) ::com::tda::sensor::protos::Offset3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::tda::sensor::protos::Offset3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Offset3D_SensorData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Offset3D_SensorData_2eproto}, {}};

static void InitDefaultsscc_info_SignData_SensorData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::tda::sensor::protos::_SignData_default_instance_;
    new (ptr) ::com::tda::sensor::protos::SignData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::tda::sensor::protos::SignData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignData_SensorData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SignData_SensorData_2eproto}, {
      &scc_info_GeoPosition_SensorData_2eproto.base,
      &scc_info_Offset3D_SensorData_2eproto.base,}};

static void InitDefaultsscc_info_Version_SensorData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::tda::sensor::protos::_Version_default_instance_;
    new (ptr) ::com::tda::sensor::protos::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::tda::sensor::protos::Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_SensorData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_SensorData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SensorData_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SensorData_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SensorData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SensorData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Version, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Version, major_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Version, minor_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::GeoPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::GeoPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::GeoPosition, latitude_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::GeoPosition, longitude_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Offset3D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Offset3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Offset3D, x_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Offset3D, y_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::Offset3D, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::SignData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::SignData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::SignData, position_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::SignData, offset_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::SignData, location_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::SignData, type_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::SignData, detectedtime_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::CarData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::CarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::CarData, softwareversion_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::CarData, mapversion_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::CarData, uuid_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::CarData, vin_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::CarData, speed_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::GeneralData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::GeneralData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::GeneralData, cardata_),
  PROTOBUF_FIELD_OFFSET(::com::tda::sensor::protos::GeneralData, signdata_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::tda::sensor::protos::Version)},
  { 9, 16, sizeof(::com::tda::sensor::protos::GeoPosition)},
  { 18, 26, sizeof(::com::tda::sensor::protos::Offset3D)},
  { 29, 39, sizeof(::com::tda::sensor::protos::SignData)},
  { 44, 54, sizeof(::com::tda::sensor::protos::CarData)},
  { 59, 66, sizeof(::com::tda::sensor::protos::GeneralData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::tda::sensor::protos::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::tda::sensor::protos::_GeoPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::tda::sensor::protos::_Offset3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::tda::sensor::protos::_SignData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::tda::sensor::protos::_CarData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::tda::sensor::protos::_GeneralData_default_instance_),
};

const char descriptor_table_protodef_SensorData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020SensorData.proto\022\025com.tda.sensor.proto"
  "s\"\'\n\007Version\022\r\n\005Major\030\001 \002(\r\022\r\n\005Minor\030\002 \002"
  "(\r\"2\n\013GeoPosition\022\020\n\010latitude\030\001 \002(\001\022\021\n\tl"
  "ongitude\030\002 \002(\001\"+\n\010Offset3D\022\t\n\001x\030\001 \002(\002\022\t\n"
  "\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\355\001\n\010SignData\0224\n\010posi"
  "tion\030\001 \002(\0132\".com.tda.sensor.protos.GeoPo"
  "sition\022/\n\006offset\030\002 \002(\0132\037.com.tda.sensor."
  "protos.Offset3D\0225\n\010location\030\003 \002(\0162#.com."
  "tda.sensor.protos.SignLocation\022-\n\004type\030\004"
  " \002(\0162\037.com.tda.sensor.protos.SignType\022\024\n"
  "\014detectedTime\030\005 \002(\004\"`\n\007CarData\022\027\n\017softwa"
  "reVersion\030\001 \002(\t\022\022\n\nmapVersion\030\002 \002(\t\022\014\n\004u"
  "uid\030\003 \002(\t\022\013\n\003vin\030\004 \002(\t\022\r\n\005speed\030\005 \002(\r\"q\n"
  "\013GeneralData\022/\n\007carData\030\001 \002(\0132\036.com.tda."
  "sensor.protos.CarData\0221\n\010signData\030\002 \002(\0132"
  "\037.com.tda.sensor.protos.SignData*m\n\014Sign"
  "Location\022\023\n\017UnknownLocation\020\000\022\020\n\014LeftLoc"
  "ation\020\001\022\021\n\rRightLocation\020\002\022\017\n\013TopLocatio"
  "n\020\004\022\022\n\016BottomLocation\020\010*\374\001\n\010SignType\022\017\n\013"
  "UnknownSign\020\000\022\022\n\016SpeedLimitSign\020\001\022\032\n\026Pas"
  "singRestrictionSign\020\002\022\025\n\021DerestrictionSi"
  "gn\020\003\022\014\n\010StopSign\020\004\022\r\n\tYieldSign\020\005\022\014\n\010Tow"
  "nSign\020\006\022\020\n\014MotorwaySign\020\007\022\021\n\rMotorRoadSi"
  "gn\020\010\022\024\n\020PriorityRoadSign\020\t\022\031\n\025Environmen"
  "talZoneSign\020\n\022\027\n\023ResidentialAreaSign\020\013B#"
  "\n\025com.tda.sensor.protosB\nSensorData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SensorData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SensorData_2eproto_sccs[6] = {
  &scc_info_CarData_SensorData_2eproto.base,
  &scc_info_GeneralData_SensorData_2eproto.base,
  &scc_info_GeoPosition_SensorData_2eproto.base,
  &scc_info_Offset3D_SensorData_2eproto.base,
  &scc_info_SignData_SensorData_2eproto.base,
  &scc_info_Version_SensorData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SensorData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorData_2eproto = {
  false, false, descriptor_table_protodef_SensorData_2eproto, "SensorData.proto", 1035,
  &descriptor_table_SensorData_2eproto_once, descriptor_table_SensorData_2eproto_sccs, descriptor_table_SensorData_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_SensorData_2eproto::offsets,
  file_level_metadata_SensorData_2eproto, 6, file_level_enum_descriptors_SensorData_2eproto, file_level_service_descriptors_SensorData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SensorData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SensorData_2eproto)), true);
namespace com {
namespace tda {
namespace sensor {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SensorData_2eproto);
  return file_level_enum_descriptors_SensorData_2eproto[0];
}
bool SignLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SensorData_2eproto);
  return file_level_enum_descriptors_SensorData_2eproto[1];
}
bool SignType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::_Internal {
 public:
  using HasBits = decltype(std::declval<Version>()._has_bits_);
  static void set_has_major(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.tda.sensor.protos.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:com.tda.sensor.protos.Version)
}

void Version::SharedCtor() {
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:com.tda.sensor.protos.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_SensorData_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:com.tda.sensor.protos.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&major_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minor_) -
        reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 Major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_major(&has_bits);
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 Minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minor(&has_bits);
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tda.sensor.protos.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Major = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // required uint32 Minor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tda.sensor.protos.Version)
  return target;
}

size_t Version::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.tda.sensor.protos.Version)
  size_t total_size = 0;

  if (_internal_has_major()) {
    // required uint32 Major = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major());
  }

  if (_internal_has_minor()) {
    // required uint32 Minor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minor());
  }

  return total_size;
}
size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.tda.sensor.protos.Version)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 Major = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major());

    // required uint32 Minor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.tda.sensor.protos.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.tda.sensor.protos.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.tda.sensor.protos.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.tda.sensor.protos.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      major_ = from.major_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_ = from.minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.tda.sensor.protos.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.tda.sensor.protos.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, minor_)
      + sizeof(Version::minor_)
      - PROTOBUF_FIELD_OFFSET(Version, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPosition::InitAsDefaultInstance() {
}
class GeoPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<GeoPosition>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GeoPosition::GeoPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.tda.sensor.protos.GeoPosition)
}
GeoPosition::GeoPosition(const GeoPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:com.tda.sensor.protos.GeoPosition)
}

void GeoPosition::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

GeoPosition::~GeoPosition() {
  // @@protoc_insertion_point(destructor:com.tda.sensor.protos.GeoPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoPosition::ArenaDtor(void* object) {
  GeoPosition* _this = reinterpret_cast< GeoPosition* >(object);
  (void)_this;
}
void GeoPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPosition& GeoPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPosition_SensorData_2eproto.base);
  return *internal_default_instance();
}


void GeoPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:com.tda.sensor.protos.GeoPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tda.sensor.protos.GeoPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tda.sensor.protos.GeoPosition)
  return target;
}

size_t GeoPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.tda.sensor.protos.GeoPosition)
  size_t total_size = 0;

  if (_internal_has_latitude()) {
    // required double latitude = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t GeoPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.tda.sensor.protos.GeoPosition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double latitude = 1;
    total_size += 1 + 8;

    // required double longitude = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.tda.sensor.protos.GeoPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.tda.sensor.protos.GeoPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.tda.sensor.protos.GeoPosition)
    MergeFrom(*source);
  }
}

void GeoPosition::MergeFrom(const GeoPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.tda.sensor.protos.GeoPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeoPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.tda.sensor.protos.GeoPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPosition::CopyFrom(const GeoPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.tda.sensor.protos.GeoPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPosition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GeoPosition::InternalSwap(GeoPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPosition, longitude_)
      + sizeof(GeoPosition::longitude_)
      - PROTOBUF_FIELD_OFFSET(GeoPosition, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Offset3D::InitAsDefaultInstance() {
}
class Offset3D::_Internal {
 public:
  using HasBits = decltype(std::declval<Offset3D>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Offset3D::Offset3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.tda.sensor.protos.Offset3D)
}
Offset3D::Offset3D(const Offset3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:com.tda.sensor.protos.Offset3D)
}

void Offset3D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Offset3D::~Offset3D() {
  // @@protoc_insertion_point(destructor:com.tda.sensor.protos.Offset3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Offset3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Offset3D::ArenaDtor(void* object) {
  Offset3D* _this = reinterpret_cast< Offset3D* >(object);
  (void)_this;
}
void Offset3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Offset3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Offset3D& Offset3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Offset3D_SensorData_2eproto.base);
  return *internal_default_instance();
}


void Offset3D::Clear() {
// @@protoc_insertion_point(message_clear_start:com.tda.sensor.protos.Offset3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Offset3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Offset3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tda.sensor.protos.Offset3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tda.sensor.protos.Offset3D)
  return target;
}

size_t Offset3D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.tda.sensor.protos.Offset3D)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Offset3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.tda.sensor.protos.Offset3D)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Offset3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.tda.sensor.protos.Offset3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Offset3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Offset3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.tda.sensor.protos.Offset3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.tda.sensor.protos.Offset3D)
    MergeFrom(*source);
  }
}

void Offset3D::MergeFrom(const Offset3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.tda.sensor.protos.Offset3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Offset3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.tda.sensor.protos.Offset3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offset3D::CopyFrom(const Offset3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.tda.sensor.protos.Offset3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offset3D::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Offset3D::InternalSwap(Offset3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Offset3D, z_)
      + sizeof(Offset3D::z_)
      - PROTOBUF_FIELD_OFFSET(Offset3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Offset3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignData::InitAsDefaultInstance() {
  ::com::tda::sensor::protos::_SignData_default_instance_._instance.get_mutable()->position_ = const_cast< ::com::tda::sensor::protos::GeoPosition*>(
      ::com::tda::sensor::protos::GeoPosition::internal_default_instance());
  ::com::tda::sensor::protos::_SignData_default_instance_._instance.get_mutable()->offset_ = const_cast< ::com::tda::sensor::protos::Offset3D*>(
      ::com::tda::sensor::protos::Offset3D::internal_default_instance());
}
class SignData::_Internal {
 public:
  using HasBits = decltype(std::declval<SignData>()._has_bits_);
  static const ::com::tda::sensor::protos::GeoPosition& position(const SignData* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::tda::sensor::protos::Offset3D& offset(const SignData* msg);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_detectedtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::com::tda::sensor::protos::GeoPosition&
SignData::_Internal::position(const SignData* msg) {
  return *msg->position_;
}
const ::com::tda::sensor::protos::Offset3D&
SignData::_Internal::offset(const SignData* msg) {
  return *msg->offset_;
}
SignData::SignData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.tda.sensor.protos.SignData)
}
SignData::SignData(const SignData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::com::tda::sensor::protos::GeoPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_offset()) {
    offset_ = new ::com::tda::sensor::protos::Offset3D(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&detectedtime_) -
    reinterpret_cast<char*>(&location_)) + sizeof(detectedtime_));
  // @@protoc_insertion_point(copy_constructor:com.tda.sensor.protos.SignData)
}

void SignData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignData_SensorData_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detectedtime_) -
      reinterpret_cast<char*>(&position_)) + sizeof(detectedtime_));
}

SignData::~SignData() {
  // @@protoc_insertion_point(destructor:com.tda.sensor.protos.SignData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete offset_;
}

void SignData::ArenaDtor(void* object) {
  SignData* _this = reinterpret_cast< SignData* >(object);
  (void)_this;
}
void SignData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignData& SignData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignData_SensorData_2eproto.base);
  return *internal_default_instance();
}


void SignData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.tda.sensor.protos.SignData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(offset_ != nullptr);
      offset_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&detectedtime_) -
        reinterpret_cast<char*>(&location_)) + sizeof(detectedtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .com.tda.sensor.protos.GeoPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.tda.sensor.protos.Offset3D offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.tda.sensor.protos.SignLocation location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::tda::sensor::protos::SignLocation_IsValid(val))) {
            _internal_set_location(static_cast<::com::tda::sensor::protos::SignLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .com.tda.sensor.protos.SignType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::tda::sensor::protos::SignType_IsValid(val))) {
            _internal_set_type(static_cast<::com::tda::sensor::protos::SignType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 detectedTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_detectedtime(&has_bits);
          detectedtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tda.sensor.protos.SignData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.tda.sensor.protos.GeoPosition position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // required .com.tda.sensor.protos.Offset3D offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::offset(this), target, stream);
  }

  // required .com.tda.sensor.protos.SignLocation location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_location(), target);
  }

  // required .com.tda.sensor.protos.SignType type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // required uint64 detectedTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_detectedtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tda.sensor.protos.SignData)
  return target;
}

size_t SignData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.tda.sensor.protos.SignData)
  size_t total_size = 0;

  if (_internal_has_position()) {
    // required .com.tda.sensor.protos.GeoPosition position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (_internal_has_offset()) {
    // required .com.tda.sensor.protos.Offset3D offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  if (_internal_has_location()) {
    // required .com.tda.sensor.protos.SignLocation location = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_location());
  }

  if (_internal_has_type()) {
    // required .com.tda.sensor.protos.SignType type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_detectedtime()) {
    // required uint64 detectedTime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_detectedtime());
  }

  return total_size;
}
size_t SignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.tda.sensor.protos.SignData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .com.tda.sensor.protos.GeoPosition position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);

    // required .com.tda.sensor.protos.Offset3D offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);

    // required .com.tda.sensor.protos.SignLocation location = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_location());

    // required .com.tda.sensor.protos.SignType type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required uint64 detectedTime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_detectedtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.tda.sensor.protos.SignData)
  GOOGLE_DCHECK_NE(&from, this);
  const SignData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.tda.sensor.protos.SignData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.tda.sensor.protos.SignData)
    MergeFrom(*source);
  }
}

void SignData::MergeFrom(const SignData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.tda.sensor.protos.SignData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::com::tda::sensor::protos::GeoPosition::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_offset()->::com::tda::sensor::protos::Offset3D::MergeFrom(from._internal_offset());
    }
    if (cached_has_bits & 0x00000004u) {
      location_ = from.location_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      detectedtime_ = from.detectedtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.tda.sensor.protos.SignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignData::CopyFrom(const SignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.tda.sensor.protos.SignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_position()) {
    if (!position_->IsInitialized()) return false;
  }
  if (_internal_has_offset()) {
    if (!offset_->IsInitialized()) return false;
  }
  return true;
}

void SignData::InternalSwap(SignData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignData, detectedtime_)
      + sizeof(SignData::detectedtime_)
      - PROTOBUF_FIELD_OFFSET(SignData, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CarData::InitAsDefaultInstance() {
}
class CarData::_Internal {
 public:
  using HasBits = decltype(std::declval<CarData>()._has_bits_);
  static void set_has_softwareversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mapversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

CarData::CarData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.tda.sensor.protos.CarData)
}
CarData::CarData(const CarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  softwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_softwareversion()) {
    softwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_softwareversion(),
      GetArena());
  }
  mapversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mapversion()) {
    mapversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mapversion(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vin()) {
    vin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vin(),
      GetArena());
  }
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:com.tda.sensor.protos.CarData)
}

void CarData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CarData_SensorData_2eproto.base);
  softwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  speed_ = 0u;
}

CarData::~CarData() {
  // @@protoc_insertion_point(destructor:com.tda.sensor.protos.CarData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CarData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  softwareversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CarData::ArenaDtor(void* object) {
  CarData* _this = reinterpret_cast< CarData* >(object);
  (void)_this;
}
void CarData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarData& CarData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarData_SensorData_2eproto.base);
  return *internal_default_instance();
}


void CarData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.tda.sensor.protos.CarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      softwareversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mapversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      vin_.ClearNonDefaultToEmpty();
    }
  }
  speed_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string softwareVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_softwareversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.tda.sensor.protos.CarData.softwareVersion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string mapVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mapversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.tda.sensor.protos.CarData.mapVersion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.tda.sensor.protos.CarData.uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string vin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.tda.sensor.protos.CarData.vin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tda.sensor.protos.CarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string softwareVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_softwareversion().data(), static_cast<int>(this->_internal_softwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.tda.sensor.protos.CarData.softwareVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_softwareversion(), target);
  }

  // required string mapVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mapversion().data(), static_cast<int>(this->_internal_mapversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.tda.sensor.protos.CarData.mapVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapversion(), target);
  }

  // required string uuid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.tda.sensor.protos.CarData.uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uuid(), target);
  }

  // required string vin = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vin().data(), static_cast<int>(this->_internal_vin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.tda.sensor.protos.CarData.vin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vin(), target);
  }

  // required uint32 speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tda.sensor.protos.CarData)
  return target;
}

size_t CarData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.tda.sensor.protos.CarData)
  size_t total_size = 0;

  if (_internal_has_softwareversion()) {
    // required string softwareVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_softwareversion());
  }

  if (_internal_has_mapversion()) {
    // required string mapVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapversion());
  }

  if (_internal_has_uuid()) {
    // required string uuid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  if (_internal_has_vin()) {
    // required string vin = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vin());
  }

  if (_internal_has_speed()) {
    // required uint32 speed = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speed());
  }

  return total_size;
}
size_t CarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.tda.sensor.protos.CarData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string softwareVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_softwareversion());

    // required string mapVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapversion());

    // required string uuid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());

    // required string vin = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vin());

    // required uint32 speed = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speed());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.tda.sensor.protos.CarData)
  GOOGLE_DCHECK_NE(&from, this);
  const CarData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.tda.sensor.protos.CarData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.tda.sensor.protos.CarData)
    MergeFrom(*source);
  }
}

void CarData::MergeFrom(const CarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.tda.sensor.protos.CarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_softwareversion(from._internal_softwareversion());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mapversion(from._internal_mapversion());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_vin(from._internal_vin());
    }
    if (cached_has_bits & 0x00000010u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CarData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.tda.sensor.protos.CarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarData::CopyFrom(const CarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.tda.sensor.protos.CarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CarData::InternalSwap(CarData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  softwareversion_.Swap(&other->softwareversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mapversion_.Swap(&other->mapversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vin_.Swap(&other->vin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneralData::InitAsDefaultInstance() {
  ::com::tda::sensor::protos::_GeneralData_default_instance_._instance.get_mutable()->cardata_ = const_cast< ::com::tda::sensor::protos::CarData*>(
      ::com::tda::sensor::protos::CarData::internal_default_instance());
  ::com::tda::sensor::protos::_GeneralData_default_instance_._instance.get_mutable()->signdata_ = const_cast< ::com::tda::sensor::protos::SignData*>(
      ::com::tda::sensor::protos::SignData::internal_default_instance());
}
class GeneralData::_Internal {
 public:
  using HasBits = decltype(std::declval<GeneralData>()._has_bits_);
  static const ::com::tda::sensor::protos::CarData& cardata(const GeneralData* msg);
  static void set_has_cardata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::tda::sensor::protos::SignData& signdata(const GeneralData* msg);
  static void set_has_signdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::com::tda::sensor::protos::CarData&
GeneralData::_Internal::cardata(const GeneralData* msg) {
  return *msg->cardata_;
}
const ::com::tda::sensor::protos::SignData&
GeneralData::_Internal::signdata(const GeneralData* msg) {
  return *msg->signdata_;
}
GeneralData::GeneralData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.tda.sensor.protos.GeneralData)
}
GeneralData::GeneralData(const GeneralData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cardata()) {
    cardata_ = new ::com::tda::sensor::protos::CarData(*from.cardata_);
  } else {
    cardata_ = nullptr;
  }
  if (from._internal_has_signdata()) {
    signdata_ = new ::com::tda::sensor::protos::SignData(*from.signdata_);
  } else {
    signdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.tda.sensor.protos.GeneralData)
}

void GeneralData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneralData_SensorData_2eproto.base);
  ::memset(&cardata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signdata_) -
      reinterpret_cast<char*>(&cardata_)) + sizeof(signdata_));
}

GeneralData::~GeneralData() {
  // @@protoc_insertion_point(destructor:com.tda.sensor.protos.GeneralData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeneralData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cardata_;
  if (this != internal_default_instance()) delete signdata_;
}

void GeneralData::ArenaDtor(void* object) {
  GeneralData* _this = reinterpret_cast< GeneralData* >(object);
  (void)_this;
}
void GeneralData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeneralData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralData& GeneralData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneralData_SensorData_2eproto.base);
  return *internal_default_instance();
}


void GeneralData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.tda.sensor.protos.GeneralData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cardata_ != nullptr);
      cardata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signdata_ != nullptr);
      signdata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeneralData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .com.tda.sensor.protos.CarData carData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.tda.sensor.protos.SignData signData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneralData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tda.sensor.protos.GeneralData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.tda.sensor.protos.CarData carData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cardata(this), target, stream);
  }

  // required .com.tda.sensor.protos.SignData signData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tda.sensor.protos.GeneralData)
  return target;
}

size_t GeneralData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.tda.sensor.protos.GeneralData)
  size_t total_size = 0;

  if (_internal_has_cardata()) {
    // required .com.tda.sensor.protos.CarData carData = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardata_);
  }

  if (_internal_has_signdata()) {
    // required .com.tda.sensor.protos.SignData signData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signdata_);
  }

  return total_size;
}
size_t GeneralData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.tda.sensor.protos.GeneralData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.tda.sensor.protos.CarData carData = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardata_);

    // required .com.tda.sensor.protos.SignData signData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signdata_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.tda.sensor.protos.GeneralData)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneralData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.tda.sensor.protos.GeneralData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.tda.sensor.protos.GeneralData)
    MergeFrom(*source);
  }
}

void GeneralData::MergeFrom(const GeneralData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.tda.sensor.protos.GeneralData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cardata()->::com::tda::sensor::protos::CarData::MergeFrom(from._internal_cardata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signdata()->::com::tda::sensor::protos::SignData::MergeFrom(from._internal_signdata());
    }
  }
}

void GeneralData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.tda.sensor.protos.GeneralData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralData::CopyFrom(const GeneralData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.tda.sensor.protos.GeneralData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cardata()) {
    if (!cardata_->IsInitialized()) return false;
  }
  if (_internal_has_signdata()) {
    if (!signdata_->IsInitialized()) return false;
  }
  return true;
}

void GeneralData::InternalSwap(GeneralData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeneralData, signdata_)
      + sizeof(GeneralData::signdata_)
      - PROTOBUF_FIELD_OFFSET(GeneralData, cardata_)>(
          reinterpret_cast<char*>(&cardata_),
          reinterpret_cast<char*>(&other->cardata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneralData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace sensor
}  // namespace tda
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::tda::sensor::protos::Version* Arena::CreateMaybeMessage< ::com::tda::sensor::protos::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::tda::sensor::protos::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::com::tda::sensor::protos::GeoPosition* Arena::CreateMaybeMessage< ::com::tda::sensor::protos::GeoPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::tda::sensor::protos::GeoPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::com::tda::sensor::protos::Offset3D* Arena::CreateMaybeMessage< ::com::tda::sensor::protos::Offset3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::tda::sensor::protos::Offset3D >(arena);
}
template<> PROTOBUF_NOINLINE ::com::tda::sensor::protos::SignData* Arena::CreateMaybeMessage< ::com::tda::sensor::protos::SignData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::tda::sensor::protos::SignData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::tda::sensor::protos::CarData* Arena::CreateMaybeMessage< ::com::tda::sensor::protos::CarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::tda::sensor::protos::CarData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::tda::sensor::protos::GeneralData* Arena::CreateMaybeMessage< ::com::tda::sensor::protos::GeneralData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::tda::sensor::protos::GeneralData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
