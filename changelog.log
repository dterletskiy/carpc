version 1.0.0 (2019-12-02_19-34-34)
 - introduced python build system.

version 1.0.1 (2019-12-05_10-40-26)
 - Remover OS dependency in Thread, Mutex and ConditionVariable classes. STD implementation was removed.
 - Android os support was implemented.
 - Extended ByteBuffer with implementation for optional.
 - improved build system.
 - coloros in build system.

version 1.0.2 (2019-12-08_05-45-51)
 - Removed "send_event" depricated method from Service class.
 - class "Event_ID" replaced by typedef "EventTypeID".
 - improved build system.

version 1.1.0 (2019-12-18_10-53-25)
 - Event class was splitted on two: with id and without id.
 - Base event was splitted to several files.
 - Subscription to event by id was added (for request/response concept).
 - Extended request/response concept for DSI support.
 - Implemented "send_to_context" and "create_send_to_context" methods for Event.
 - Implemented "Timer".

version 1.1.1 (2019-12-21_18-14-44)
 - Added __rdtsc function (CPU ticks)

version 1.1.2 (2019-12-29_16-01-21)
 - Removed "ServiceBrocker". Send ETC event directly to each service event pull.
 - Renamed "ServiceBrockerDSI" to "ServiceBrocker".
 - Creating event from buffer and buffer from event moved to EventRegistry.
 - Mothods "to_buffer" and "from_buffer" now work identically.
 - Implemented DSI and non DSI request/response examples.

version 1.1.2 (2020-01-17_17-51-45)
 - Created git repository
 - Initial implementation of base parts for "Server", "Client" and "Registry".

version 1.1.2a
 - Move "Event" implementation to subfolder "event" in "comm".
 - Rename "/framework/*/sys/Timer" to "/framework/*/sys/timer".

version 1.1.2b
 - Renaming class "Event" to class "IEvent".

version 1.2.0
 - "Signature" polymorphic class introduced for events.
 - "Siganture" class is used for key in subscriptions map in "Service".
 - Communication type moved from "TBaseEvent" to "IEvent".
 - Splitted sfinae class "TEvent" and "TGenerator" to different classes ("TEventSimple", "TEventSimpleID" and so on).
 - Removed DSI event concept created by macros "DECLARE_DSI_EVENT", "INIT_DSI_EVENT" and "REGISTER_DSI_EVENT". Corresponding macros also removed.
 - Implemented IPC concept create by macros "DECLARE_IPC_EVENT", "INIT_IPC_EVENT" and "REGISTER_IPC_EVENT". Service type is used only to identify if event supports IPC of not and is not set by user.
 - Removed memory leaks detected by valgrind.
 - New event type "TEventRR".
 - Changed implementation for test request/response to new event type.

version 1.2.1
 - Reimplemented example with interface OnOff in "test_app_0".

version 1.2.2
 - Renamed "Service" to "ServiceThread".
 - Renamed "ServiceBrocker" to "ServiceBrockerThread".

version 1.2.3
 - Base interface implementation. Register/unregister server/client logic implemented.
 - "MutexAutoLocker" implemented.

version 1.2.4
 - Removed "test_app_0" prject
 - Extended "application" project by content from "test_app_0".

version 1.2.4a
 - Small modifications in "application" project.

version 1.2.5
 - Macros "INIT_EVENT" and "REGISTER_EVENT" was made universal and single.
 - "Generated" classes from idl redesigned.
 - "Interface" class in framewrok extended by next template methods: create_send_event, get_event_data. This leads to some additional rules for generated stuff from idl files.

version 1.2.6
 - Request/Response implementation updated.
 - Template events' static functions signature changed (now in is similar for all of them and has "Signature" instead of a lot of other parameters).

version 1.3.0
 - Request/Response concept completely reimplemented.
 - Event with no data serialization/deserialization logic implemented to avoid crash in case of data in event is nullptr.
 - Request busy notification implemented.

version 1.4.0
 - Implemented proxy concept. Only one proxy instance created per service thread. This proxy subscribes on all needed events and receives them from Server and notifies all clients. Each client should call static method "create" for corresponding proxy. In this case proxy will be created or return already existinf one. Then client registers to proxy and will received needed callback. This leads to redusing event flow between Server and all client in one service thread. In this case Server communicates only with one Proxy instance in this thread.
 - Fixed critical issue with invalid useage Mutex.

verion 1.4.1
 - Notifications implemented

verion 1.4.2
 - Fixing TServer/TProxy implementation.
 - Implemented example for interface usage from different threads and components.
