version 3.8.7
   - Fix: issue #13. Crash in MVC example applications (HMI crash) during receiving IPC response or notification event.

version 3.8.6
   - Simplified TAsyncTypeID using partial template specification for std::string and std::size_t instead of enable_if.

version 3.8.5
   - Implemented extended event generator concept. TGenerator specification for user signature enum and integral types. Further this mechanism could be used for any TGenerator specification. Exact TGenerator specification could be detected in TEvent and TSignature to specify specific logic or even implement specific implementation of these template classes for specific user signature types. 

version 3.8.4
   - Implemented type traits helper macros.
   - Created common carpc::IPC and carpc::NO_IPC types for further usage.
   - Using type traits helper macros in ByteStream class instead of internaly defined macros. 

version 3.8.3
   - Experimental TServer implementation improvement to "secure" level in old service implementation. But one issue still must be solved (marked @TDA-BUG in old TServer secure implementation).
   - Previour service implementations (fast and secure) will be removed in the future.
   - All OnOff interface implemetations in exampled migrated to version 2.0.0.

version 3.8.2b
   - Repository cleanup from legacy code.

version 3.8.2a
   - Examples code adaptation to new OnOff service location and implementation.
   - "service_version" example removed.

version 3.8.2
   - Moved OnOff service implementation from "framework" library to "service" library.
   - Introduced versioning for OnOff service.
   - OnOff service "generated" code refactoring.

version 3.8.1
   - Removed some/ip code (client/server) from "rolename" example what was used for comparison metrix.

version 3.8.0
   - Service experimental implementation added.
     Complete TServer, TProxy, TClient, TSignature, TGenerator refactoring.
     Introduced two different event for methods and attributed in one service.
     Service generated code changed.
     Final client code is not affected.
     OnOff experimental service implemented as an example.

version 3.7.8
   - Event definition macros improvement.
   - Rename unwanted structure name "Data" for event data type.

version 3.7.7
   - Service onoff code optimization.

version 3.7.6
   - Implemented connection type field in IConnection.
   - Implemented example with interface versioning. Using the same interface with different versions.

version 3.7.5
   - Minor fix namespace in macro.

version 3.7.4
   - Implement object type template parameter for TVersion to distinguish versions for different types.

version 3.7.3
   - TVersion implementation.

version 3.7.2
   - Implement "compiler" option to build.sh.

version 3.7.1
   - Implement asynchronous shutdown process for all components.

version 3.6.12
   - SharedCallback implementation extended.

version 3.6.11
   - Splitting timer implementation on two cpp files.

version 3.6.10
   - FSM minor changes.

version 3.6.9
   - Changed implementation for TCallable::call( ) with expanding tuple to parameter pack and calling function using C++17 std::apply.
   - Implement wrapper function for TCallable::create( ... ).

version 3.6.8
   - Extend build system for switching compilers.
   - Implement different compiler options for clang and gcc.

version 3.6.7
   - Extended async::Runnable object for blocking current (caller) thread until it was not executed in destination thread.
     This functionality will be useful for synchronization application with android hidl/aidl oneway interfaces' methods.

version 3.6.6
   - Extend implementation by functionality to obtain application thread or its id by its name.
     This is need for building context for sending async object. In this case there is no other information about context to send except of its thread name (process id is current or must be known).

version 3.6.5
   - Extend comparison operators for carpc::TName for future usage.

version 3.6.4
   - Exchange application::Context constuctor parameters order to have an easier way to build local context without setting PID.

version 3.6.3
   - Extended condition variable wrapper for spurious wakeup flag testing.

version 3.6.2
   - Disabling application thread watchdog timeout by setting it to 0 or negative value.

version 3.6.1
   - Minor changes. Refactoring.

version 3.6.0
   - Implement typeid generation without RTTI using __PRETTY_FUNCTION__ macro.
   - Added possibility to enable or disable RTTI typeid generation.
   - Disable RTTI for Android build.

version 3.5.10
   - Moved "wd_timeout" to application configuration.

version 3.5.9
   - Fix: Application crash occurs during parsing configuration parameters in case of some configuration is missing:
     terminate called after throwing an instance of 'std::bad_optional_access'

version 3.5.8
   - Fix: Android build due to specific functions and defines in libc and bionic libraries.

version 3.5.7
   - Adding and processing configuration parametes what allowes to enable or disable IPC thread and IPC communication.

version 3.5.6
   - Minor changes.

version 3.5.5
   - Moving "api/sys/dsi/Types.hpp" to "api/sys/common/Packet.hpp" and renaming namespace "carpc::dsi" to "carpc::ipc".
   - Initial README.md.

version 3.5.4
   Fix: crash in case of sending data to not connected socket in carpc::os::Socket wrapper.

version 3.5.3
   - Refactoring for CircularBuffer and ByteStream interfaces.

version 3.5.2
   - Implemented functionality to detect system byte order.

version 3.5.1
   - Implementation serialization/deserialization for "shared_ptr" and "unique_ptr" in ByteStream.
   - Applying "shared_ptr" serialization/deserialization in TEvent.
   - Example "stream" extended for "shared_ptr" and "unique_ptr".

version 3.5.0
   - Renaming main namespace "base" to "carpc"
   - Build fix after previous commit by renaming "process::configuration::current" to "configuration::current".

version 3.4.4
   - Minor chages in application part.

version 3.4.3
   - Improve starting and initializing application sequence to avoid chaotic starting application threads and registering services before starting IPC thread.

version 3.4.2
   - Fix: clear containers before deserialization from stream in ByteStream.
   - Extended example "stream" for serialize/deserialize objects.
   - Implemented helper method for printing buffer in hex and bin representation.

version 3.4.1
   - Extended ByteStream to push and pop google protobuf objects using its serialize/deserialize methods.
   - Extended build system to compile projects with or without google protobuf.
   - Added generate folder for generated source files (google protobuf files).
   - Implemented example "stream" for serialize/deserialize objects.

version 3.4.0
   - Big workaroung with namespaces.
   - base::TName type implemented for naming objects instead of std::string.
   - Refactoring event TGenerator and TConsumer.

version 3.3.8
   - Minor changes with types adaptations.

version 3.3.7
   - event::TSignature::build_type_id( ) optimization.
   - added and commented alternative variant with static member.

version 3.3.6a
   - Added metrix to documentation.

version 3.3.6
   - Fix: nullptr in configuration and parameters processing.
   - Some minor changes and optimisations.
   - Build system changes for run process.
   - Introduces some/ip to "rolename" example to compare metrics.

version 3.3.5
   - Minor changes in android build system.
   - thirdparty folder added.
   - libc++fs library for android build.

version 3.3.4
   - Performance metrics test.

version 3.3.3
   - Implemented possibility to disable application watchdog in configuration.

version 3.3.2
   - Configuration file processing improvement.

version 3.3.1
   - Minor changes in android build system.

version 3.3.0
   - Redesign SendReceive component for fixinf bugs and crashes. This is just initial implementation of new idea.

version 3.2.5
   - Implemented new example ("rolename") for testing.

version 3.2.4
   - Moved all examples and test applications to folder "examples"

version 3.2.3
   - Build system improvement. Android.bp file updated.

version 3.2.2
   - Fixing some bugs and issues.
   - Android.bp file implemented to have a possibility to build framework directly in aosp soong build system.

version 3.2.1
   - Fixing bug when pending object with socket socket receives two packages at the same time. During processing one package (for example "RegisterProcessAck") this socket will be moved to channel object. Processing second package will be done by pending object, but
   its content depends on channel object (for example "RegisterClient").

version 3.1.17
   - Build system improvement.

version 3.1.16
   - Build system improvement.

version 3.1.15
   - Build system improvement.

version 3.1.14
   - Change started flag in application thread to atomic.
   - Move back_trace to separate file.
   - Rename "OS" definition to "OS_TARGET" definition.
   - Improve start scripts and build system.
   - build.sh script processes second parameter for ctarget OS (android or linux).

version 3.1.13
   - Change IPC protocole from UNIX to TCP/IP socket.
   - Fix missing case for linux socket processing.
   - Remove try/catch from Priority type.
   - Add rt library for linking to framework.
   - Improve start scripts.
   - Fix obtaining application name for Logger (error: object backing the pointer will be destroyed at the end of the full-expression)

version 3.1.12
   - Change "install" build target for include headers.

version 3.1.11
   - Rename ANDROID log strategy to ANDROID_LOGCAT to avoid naming collision in aosp.

version 3.1.10a
   - Nothing changed. Just needed commit.

version 3.1.10
   - Improvement for processing configuration and command line parameters.

version 3.1.9
   - Implementation for Android executable build.

version 3.1.8a
   - Some fix for previous commit.

version 3.1.8
   - Fix for permanent stuck in SendReceive thread after shutdown what prevents to complete shutdown.
   - Some changes and fixes in oswrappers/linux/time.
   - Trace log buffer implemented as configurable.

version 3.1.7a
   - Some fix for previous commit.

version 3.1.7
   - Implemented read/write mutex wrapper.
   - Improvement for mutex wrapper.
   - Improvement for cmake build system.

version 3.1.6
   - Initial code generator scripts.

version 3.1.5
   - Some minor changes.
   - Changed minimal required cmake version.

version 3.1.4
   - Thread synchronization refactoring.
   - Spinlock wrapper implemented.
   - Futex wrapper implemented.

version 3.1.3
   - Wrappers for kernel socket functions added.

version 3.1.2
   - INSTRUMENTAL and MEMORY_HOOK support were added to build system.
   - Some minor changes.

version 3.1.1
   - Return back previously removed main.cpp file from experimental project.

version 3.1.0
   - Common serialization / deserialization wrappers implemented and used in the code instead of stream.push(...) / stream.pop(...).
     This will allow to used any other serializer / deserializer in the future just introducing new wrappers.
   - Event serializetion / deserialization algorithm changed.
   - Fix in CircularBuffer for "pop_back".
   - Removed "lock", "store" and "restore" functionality from CircularBuffer.
   - ByteStream api and functionality extended.

version 3.0.4
   - Removed DUM from framework project.
   - Optimizations for includes.
   - Definitions for architectures introduced.
   - Some minor changes.

version 3.0.3
   - New helper functions.

version 3.0.2
   - Component implementation moved from sys/component to sys/application.
   - Cleaning code.

version 3.0.1
   - Moving SendReceive header to "imp".
   - Fixing some compilation warnings.

version 3.0.0
   - Redesign IPC protocole.
   - SendReceive class redesigned.
   - base::os::Socket could be created only as smart pointer.
   - Other minor changes.

version 2.6.9
   - Some updates for Android jni calls.
   - Fixing for "RESET" style and color in tracing for console.
   - Some minor changes in build system.
   - Project "experimental" implemented with opencv and dlib experiments.

version 2.6.8
   - Linux kernel signal wrappers extended.

version 2.6.7
   - Removed depricated tracing stuff.

version 2.6.6
   - Filesystem wrappers implementation.
   - Some minor changes.

version 2.6.5
   - Filesystem operations for linux implemented.
   - Some fixes.

version 2.6.4
   - Improvement cmake build system.
   - Removed depricated self build system.
   - Removed depricated Make build system.

version 2.6.3
   - Improvement cmake build system.
   - Some fixes for cmake build system.

version 2.6.2
   - Improvement cmake build system.

version 2.6.1
   - Improvement cmake build system.

version 2.6.0
   - Introduce cmake build system for the project.

version 2.5.4
   - Changing namespace "linux" to "os_linux" because of first one is used as predefine in some compilers.
   - Removed depricated tracing implementation.

version 2.5.3
   - request failed reason introduced.

version 2.5.2
   - Renaming "TService" file with "TGenerator" structure to "TGenerator" file name.

version 2.5.1
   - "DEFINE_ENUMERATION" and "DEFINE_ENUM" macros optimized by changing "to_string" function what return "std::string"
     to "c_str" function what returns "const char* const".

version 2.5.0
   - Implemented special structure for "enum" and "class enum" substitution.
     This structure has the same meaning as "class enum" but extended by member functions what allow to use it in:
     "switch", "rage for", printing and other additional scopes where usual "enum" and "class enum" can't be used.
   - Changed service TProxy and TServer implementation according to new rule what means that event ID since now is implemented
     not like "enum" or "class enum" but like newly implemented structure (mentioned above).
     This allowes to have more clear and simple debugging tracing.

version 2.4.7
   - Changed event notification order for server and clients in case of registered server.
     This done to avoid possible bugs when client will receive notification about connected server and performe some action to server before server will receive notification about connected client.

version 2.4.6
   - "send_to_context" for Callable and Runnable removed.
   - "send" for Callable and Runnable implemented with Context parameter (similar to Event).
   - Static "send" in Event made as member method.

version 2.4.5
   - Moved AsyncType from IAsync::ISignature to IAsync.

version 2.4.4
   - Helper functionality for calling member function of some object if it is defined implemented.

version 2.4.3
   - IPC stream type definitione moved to "/commen/IPC.hpp" from "/dsi/Types.hpp"
   - Refactoring with includes of "/dsi/Types.hpp"

version 2.4.2a
   - Build fix for version 2.4.2

version 2.4.2
   - "Command" initial implementation.

version 2.4.1
   - Activate tracing in memory hooks.

version 2.4.0
   - Tracing moved from "framework" to new project "tracing".

version 2.3.15
   - Performance improvement for tracing by replacing "springf" by "strcat" for strings concatination.

version 2.3.14
   - Memory hook refactoring.
   - Instrumental project library created.
   - Some other minor implementations.

version 2.3.13
   - "api/sys/helpers/functions/print.hpp" implementation extended.

version 2.3.12
   - Fixing issue with timer when linux creats several timers with the same ID in case of using variant with:
         sev.sigev_notify = SIGEV_SIGNAL;
     Previously this issue was not observed. Perhaps this is linux issue.

version 2.3.11
   - Bug reporting for skipping request from client to server in case of using "secure" implementation.

version 2.3.10
   - Remove "experimental" project.

version 2.3.9
   - Instrumental library implemented.
   - Some adaptations in configutation.xml.

version 2.3.8
   - Application configuration handling refactoring.

version 2.3.7
   - FSM refactoring.

version 2.3.6
   - ID class refactoring.
   - Priority class refactoring.

version 2.3.5
   - Context class refactoring.
   - Example implementation __attribute__ in "application".

version 2.3.4
   - Minor changes and adaptations in logging.
   - USE_DLT compilation flag introduced.

version 2.3.3
   - Changes in CALLABLE object.

version 2.3.2
   - Implemented Callable object for asynchronous calling function.
   - Printing parameter pack in helpers implemented.

version 2.3.1a
   - Fixes for version 2.3.1.

version 2.3.1
   - Renaming trace macros.

version 2.3.0
   - Implemented new tracing concept.
   - DLT tracing introduced.
   - Fixed some minor compilation issues.
   - Fixed some issues for Android compilation.
   - Minor changes in build script.

version 2.2.1
   - Fix in SendReceive thread IPC for not detecting disconnected socket to process with server service.

version 2.2.0a
   - Minor changes in Event macros.

version 2.2.0
   - Templated service refactoring.
   - Reduced generated stuff for service.
   - TGenerator introduced for service.

version 2.1.4
   - FSM implemented as a base in framework.
   - Extended macoros for event defining.

version 2.1.3
   - Changed file structure for /framework/api/comm/event and /framework/imp/comm/event.

version 2.1.2a
   - Modifying experimental project.

version 2.1.2
   - Change ISignature* to std::shared_ptr< ISignature > with some optimization.

version 2.1.1
   - Minor changes in build system.
   - Minor changes in OnOff interface.
   - Removed depricated PrintfTrace.hpp and PrintfTrace.cpp
   - Optimized tracing macro to have a possibility to write single line scope (for example in 'if', 'else', etc.) without scope brackets.
   - Improvement trace system. Base trace macros replaced by variadic template function. Mutex replaced by thread_local variable.
   - OnOff service moved to /services/onoff.
   - Minor chages in TServer, TProxy, TClient what allowe to simplify generated code for services.

version 2.1.0a
   - Modifying experimental project.

version 2.1.0
   - Minor changes. Set default priorities.

version 2.0.6
   - Optimization for 'notify' method in application::Thread to avoid copying consumers set during notification,
     because of it could be modified during this process. This optimized method does not use any copy ore move for collections.
     Optimization is done in 'AsyncConsumerMap'.

version 2.0.5
   - Priority for event implemented.
   - 'AsyncPriorityQueue' implemented.
   - Watchdog handling 'm_process_started' chaged to std::atomic.

version 2.0.4
   - Unregister process and service for IPC.
   - service::Passport implemented.

version 2.0.3
   - Register IPC client/server finished (initial variant).
   - IPC request/response/notification communication extablished.
   - experimental project introduced.

version 2.0.2
   - Introduced AsyncQueue and AsyncConsumerMap.
   - application::Thread and application::ThreadIPC implementation refactored using AsyncQueue and AsyncConsumerMap.
   - Minor changes.

version 2.0.1
   - IPC service register implemented.
   - HMI example application was added.

version 2.0.0
   - Complete system redesign.
   - New ID concept (base::TID) implemented in next types: Component, ServiceThread, ServiceProcess, Socket, Thread, Mutex, ConditionVariable, Timer.
   - Send event logic changed.
   - eCommType was removed.
   - Context type implemented and used in send event and other logic.
   - Service renamed to application thread.
   - Interface renamed to Service.
   - ConnectionDB renamed to Registry.
   - Fixed bug in clear_notification in application thread.
   - IPC thread redesigned.
   - Fixed some bugs in Server/Proxy logic.
   - Implemented two variants on TServer/TProxy:
         - fast - usual one what works faster but not safty in meaning of sending broadcast events for notifications.
         - secure - slower one but safty (this variant is compilable but some logic bugs should be fixed).
   - Tests removed.

version 1.8.2a
   - Minor change in base::TID.

version 1.8.2
   - IDs for Timer, Thread, ServiceProcess and ServiceThreads introduced or reimplemented to common type base::ID.
   - Timer code improvement.
   - Special class base::TID implemented for the future distinguish IDs for different types.

version 1.8.1
   - Moved all Async objects to async namespace.

version 1.8.0
   - IInterface renamed to IConnection.
   - namespace interface introduced.
   - Interface server proxy connection handling moved to ServiceIpcThread.
   - Processing configuration file for application.
   - Huge refactoring in IPC communication.
   - Fixed bug in TSignatureService copy constructor.
   - Interface signature introduced.
   - Inteface registration logic changed.
   - Test applications "core" and "controller" implemented.
   - OnOff interface moved to framework.

version 1.7.8
   - TMatrix template static and dynamic implemented.
   - Matrix functionality extended.
   - Neural network test example added based on TMatrix.

version 1.7.7
   - Test folder introduced in framework.
   - Some tests added.
   - TMatrix class implemented.

version 1.7.6a
   - Some minor changes.
   - Added protocole documentaion.

version 1.7.6
   - DSI/IPC protocole introduced to ServiceIpcThread for IPC communication.

version 1.7.5
   - Refactoring and improvement: RawBuffer, CircularBuffer, ByteStream.

version 1.7.4
   - IPC serializer/deserializer changed from ByteBufferT to ByteStream.
   - ByteStream implementation extended and fixed.
   - CircularBuffer fixes in pop_back.
   - CircularBuffer implementation extended.
   - DUM (based on curl) initial implementation.
   - StackBuffer implemented.
   - Creating event during deserialization changed. Templete method "create_event" removed.
   - EventRegistry removed. Serializetion/deserialization event and IPC event registry implemented in IEvent.
   - Event serialization/deserialization changed.
   - DSI/IPC protocole packet and package implementation changed.

version 1.7.3
   - CircularBuffer implementation extended and API documented in comments (+ test).
   - ByteStream implemented (+ test).

version 1.7.2
   - CircularBuffer implemented (+ test).

version 1.7.1
   - Fixing double send in ServiceIpcThread.
   - Updated Socket class implementation.
   - Migrated servicebrocker to Socket class implementation.
   - ByteBuffer extended.
   - DSI/IPC protocole draft implementation started.

version 1.7.0
   - ServiceBrockerThread (deleted) concept changed to ServiceIpcThread.
   - Updated shutdown logic.
   - TEvent splitted to TSignature and TGenerator.
   - Deleted old stuff from Event.hpp header with macros.
   - Server/Proxy/Client interfaces implemented.
   - New timer concept introduces.
   - uuid generator implemented.
   - Processing comman line start parameters implemented.

version 1.6.2
   - Socket class implemented.
   - Subscribe/unsubscribe on notification handling on server side.

version 1.6.1
   - AsyncTypeID implemented as template class what contains type_id inside and could be as:
      - std::string and in this case it is built as typeid::type_info::name (not optimized size for IPC but more readable)
      - std::size_t and in this case it is built ad typeid::type_info::hash_code (optimized size for IPC but not readable)
   - base::os::Mutex implemented as recurcive.
   - changelog order reverted.

version 1.6.0
   - Implemented new Event building concept. Signature (=> event type) could be created by any developer.
   - Reimplemented all concrete events using new Event concept.
   - Removed TBaseEvent, TSimpleEvent, TSimpleEventID, TEventRR.
   - System boot sequence refactored. Removed SysEvent.

version 1.5.1
   - "Client/Server" refactoring and improvement.

version 1.5.0
   - IAsync object type itroduced as base for IEvent and IRunnable.
   - Runnable onject introduced.
   - Code refactoring.

verion 1.4.5
   - TServer refactoring.

verion 1.4.4
   - Implemented request without response.

verion 1.4.3
   - Implemented storing attribute data in TServer.

verion 1.4.2
   - Fixing TServer/TProxy implementation.
   - Implemented example for interface usage from different threads and components.

verion 1.4.1
   - Notifications implemented

version 1.4.0
   - Implemented proxy concept. Only one proxy instance created per service thread. This proxy subscribes on all needed events and receives them from Server and notifies all clients. Each client should call static method "create" for corresponding proxy. In this case proxy will be created or return already existinf one. Then client registers to proxy and will received needed callback. This leads to redusing event flow between Server and all client in one service thread. In this case Server communicates only with one Proxy instance in this thread.
   - Fixed critical issue with invalid useage Mutex.

version 1.3.0
   - Request/Response concept completely reimplemented.
   - Event with no data serialization/deserialization logic implemented to avoid crash in case of data in event is nullptr.
   - Request busy notification implemented.

version 1.2.6
   - Request/Response implementation updated.
   - Template events' static functions signature changed (now in is similar for all of them and has "Signature" instead of a lot of other parameters).

version 1.2.5
   - Macros "INIT_EVENT" and "REGISTER_EVENT" was made universal and single.
   - "Generated" classes from idl redesigned.
   - "Interface" class in framewrok extended by next template methods: create_send_event, get_event_data. This leads to some additional rules for generated stuff from idl files.

version 1.2.4a
   - Small modifications in "application" project.

version 1.2.4
   - Removed "test_app_0" prject
   - Extended "application" project by content from "test_app_0".

version 1.2.3
   - Base interface implementation. Register/unregister server/client logic implemented.
   - "MutexAutoLocker" implemented.

version 1.2.2
   - Renamed "Service" to "ServiceThread".
   - Renamed "ServiceBrocker" to "ServiceBrockerThread".

version 1.2.1
   - Reimplemented example with interface OnOff in "test_app_0".

version 1.2.0
   - "Signature" polymorphic class introduced for events.
   - "Siganture" class is used for key in subscriptions map in "Service".
   - Communication type moved from "TBaseEvent" to "IEvent".
   - Splitted sfinae class "TEvent" and "TGenerator" to different classes ("TEventSimple", "TEventSimpleID" and so on).
   - Removed DSI event concept created by macros "DECLARE_DSI_EVENT", "INIT_DSI_EVENT" and "REGISTER_DSI_EVENT". Corresponding macros also removed.
   - Implemented IPC concept create by macros "DECLARE_IPC_EVENT", "INIT_IPC_EVENT" and "REGISTER_IPC_EVENT". Service type is used only to identify if event supports IPC of not and is not set by user.
   - Removed memory leaks detected by valgrind.
   - New event type "TEventRR".
   - Changed implementation for test request/response to new event type.

version 1.1.2b
   - Renaming class "Event" to class "IEvent".

version 1.1.2a
   - Move "Event" implementation to subfolder "event" in "comm".
   - Rename "/framework/*/sys/Timer" to "/framework/*/sys/timer".

version 1.1.2 (2020-01-17_17-51-45)
   - Created git repository
   - Initial implementation of base parts for "Server", "Client" and "Registry".

version 1.1.2 (2019-12-29_16-01-21)
   - Removed "ServiceBrocker". Send ETC event directly to each service event pull.
   - Renamed "ServiceBrockerDSI" to "ServiceBrocker".
   - Creating event from buffer and buffer from event moved to EventRegistry.
   - Mothods "to_buffer" and "from_buffer" now work identically.
   - Implemented DSI and non DSI request/response examples.

version 1.1.1 (2019-12-21_18-14-44)
   - Added __rdtsc function (CPU ticks)

version 1.1.0 (2019-12-18_10-53-25)
   - Event class was splitted on two: with id and without id.
   - Base event was splitted to several files.
   - Subscription to event by id was added (for request/response concept).
   - Extended request/response concept for DSI support.
   - Implemented "send_to_context" and "create_send_to_context" methods for Event.
   - Implemented "Timer".

version 1.0.2 (2019-12-08_05-45-51)
   - Removed "send_event" depricated method from Service class.
   - class "Event_ID" replaced by typedef "EventTypeID".
   - improved build system.

version 1.0.1 (2019-12-05_10-40-26)
   - Remover OS dependency in Thread, Mutex and ConditionVariable classes. STD implementation was removed.
   - Android os support was implemented.
   - Extended ByteBuffer with implementation for optional.
   - improved build system.
   - coloros in build system.

version 1.0.0 (2019-12-02_19-34-34)
   - introduced python build system.
