version 2.3.0
   - Implemented new tracing concept.
   - DLT tracing introduced.
   - Fixed some minor compilation issues.
   - Fixed some issues for Android compilation.
   - Minor changes in build script.

version 2.2.1
   - Fix in SendReceive thread IPC for not detecting disconnected socket to process with server service.

version 2.2.0a
   - Minor changes in Event macros.

version 2.2.0
   - Templated service refactoring.
   - Reduced generated stuff for service.
   - TGenerator introduced for service.

version 2.1.4
   - FSM implemented as a base in framework.
   - Extended macoros for event defining.

version 2.1.3
   - Changed file structure for /framework/api/comm/event and /framework/imp/comm/event.

version 2.1.2a
   - Modifying experimental project.

version 2.1.2
   - Change ISignature* to std::shared_ptr< ISignature > with some optimization.

version 2.1.1
   - Minor changes in build system.
   - Minor changes in OnOff interface.
   - Removed depricated PrintfTrace.hpp and PrintfTrace.cpp
   - Optimized tracing macro to have a possibility to write single line scope (for example in 'if', 'else', etc.) without scope brackets.
   - Improvement trace system. Base trace macros replaced by variadic template function. Mutex replaced by thread_local variable.
   - OnOff service moved to /services/onoff.
   - Minor chages in TServer, TProxy, TClient what allowe to simplify generated code for services.

version 2.1.0a
   - Modifying experimental project.

version 2.1.0
   - Minor changes. Set default priorities.

version 2.0.6
   - Optimization for 'notify' method in application::Thread to avoid copying consumers set during notification,
     because of it could be modified during this process. This optimized method does not use any copy ore move for collections.
     Optimization is done in 'AsyncConsumerMap'.

version 2.0.5
   - Priority for event implemented.
   - 'AsyncPriorityQueue' implemented.
   - Watchdog handling 'm_process_started' chaged to std::atomic.

version 2.0.4
   - Unregister process and service for IPC.
   - service::Passport implemented.

version 2.0.3
   - Register IPC client/server finished (initial variant).
   - IPC request/response/notification communication extablished.
   - experimental project introduced.

version 2.0.2
   - Introduced AsyncQueue and AsyncConsumerMap.
   - application::Thread and application::ThreadIPC implementation refactored using AsyncQueue and AsyncConsumerMap.
   - Minor changes.

version 2.0.1
   - IPC service register implemented.
   - HMI example application was added.

version 2.0.0
   - Complete system redesign.
   - New ID concept (base::TID) implemented in next types: Component, ServiceThread, ServiceProcess, Socket, Thread, Mutex, ConditionVariable, Timer.
   - Send event logic changed.
   - eCommType was removed.
   - Context type implemented and used in send event and other logic.
   - Service renamed to application thread.
   - Interface renamed to Service.
   - ConnectionDB renamed to Registry.
   - Fixed bug in clear_notification in application thread.
   - IPC thread redesigned.
   - Fixed some bugs in Server/Proxy logic.
   - Implemented two variants on TServer/TProxy:
         - fast - usual one what works faster but not safty in meaning of sending broadcast events for notifications.
         - secure - slower one but safty (this variant is compilable but some logic bugs should be fixed).
   - Tests removed.

version 1.8.2a
   - Minor change in base::TID.

version 1.8.2
   - IDs for Timer, Thread, ServiceProcess and ServiceThreads introduced or reimplemented to common type base::ID.
   - Timer code improvement.
   - Special class base::TID implemented for the future distinguish IDs for different types.

version 1.8.1
   - Moved all Async objects to async namespace.

version 1.8.0
   - IInterface renamed to IConnection.
   - namespace interface introduced.
   - Interface server proxy connection handling moved to ServiceIpcThread.
   - Processing configuration file for application.
   - Huge refactoring in IPC communication.
   - Fixed bug in TSignatureService copy constructor.
   - Interface signature introduced.
   - Inteface registration logic changed.
   - Test applications "core" and "controller" implemented.
   - OnOff interface moved to framework.

version 1.7.8
   - TMatrix template static and dynamic implemented.
   - Matrix functionality extended.
   - Neural network test example added based on TMatrix.

version 1.7.7
   - Test folder introduced in framework.
   - Some tests added.
   - TMatrix class implemented.

version 1.7.6a
   - Some minor changes.
   - Added protocole documentaion.

version 1.7.6
   - DSI/IPC protocole introduced to ServiceIpcThread for IPC communication.

version 1.7.5
   - Refactoring and improvement: RawBuffer, CircularBuffer, ByteStream.

version 1.7.4
   - IPC serializer/deserializer changed from ByteBufferT to ByteStream.
   - ByteStream implementation extended and fixed.
   - CircularBuffer fixes in pop_back.
   - CircularBuffer implementation extended.
   - DUM (based on curl) initial implementation.
   - StackBuffer implemented.
   - Creating event during deserialization changed. Templete method "create_event" removed.
   - EventRegistry removed. Serializetion/deserialization event and IPC event registry implemented in IEvent.
   - Event serialization/deserialization changed.
   - DSI/IPC protocole packet and package implementation changed.

version 1.7.3
   - CircularBuffer implementation extended and API documented in comments (+ test).
   - ByteStream implemented (+ test).

version 1.7.2
   - CircularBuffer implemented (+ test).

version 1.7.1
   - Fixing double send in ServiceIpcThread.
   - Updated Socket class implementation.
   - Migrated servicebrocker to Socket class implementation.
   - ByteBuffer extended.
   - DSI/IPC protocole draft implementation started.

version 1.7.0
   - ServiceBrockerThread (deleted) concept changed to ServiceIpcThread.
   - Updated shutdown logic.
   - TEvent splitted to TSignature and TGenerator.
   - Deleted old stuff from Event.hpp header with macros.
   - Server/Proxy/Client interfaces implemented.
   - New timer concept introduces.
   - uuid generator implemented.
   - Processing comman line start parameters implemented.

version 1.6.2
   - Socket class implemented.
   - Subscribe/unsubscribe on notification handling on server side.

version 1.6.1
   - AsyncTypeID implemented as template class what contains type_id inside and could be as:
      - std::string and in this case it is built as typeid::type_info::name (not optimized size for IPC but more readable)
      - std::size_t and in this case it is built ad typeid::type_info::hash_code (optimized size for IPC but not readable)
   - base::os::Mutex implemented as recurcive.
   - changelog order reverted.

version 1.6.0
   - Implemented new Event building concept. Signature (=> event type) could be created by any developer.
   - Reimplemented all concrete events using new Event concept.
   - Removed TBaseEvent, TSimpleEvent, TSimpleEventID, TEventRR.
   - System boot sequence refactored. Removed SysEvent.

version 1.5.1
   - "Client/Server" refactoring and improvement.

version 1.5.0
   - IAsync object type itroduced as base for IEvent and IRunnable.
   - Runnable onject introduced.
   - Code refactoring.

verion 1.4.5
   - TServer refactoring.

verion 1.4.4
   - Implemented request without response.

verion 1.4.3
   - Implemented storing attribute data in TServer.

verion 1.4.2
   - Fixing TServer/TProxy implementation.
   - Implemented example for interface usage from different threads and components.

verion 1.4.1
   - Notifications implemented

version 1.4.0
   - Implemented proxy concept. Only one proxy instance created per service thread. This proxy subscribes on all needed events and receives them from Server and notifies all clients. Each client should call static method "create" for corresponding proxy. In this case proxy will be created or return already existinf one. Then client registers to proxy and will received needed callback. This leads to redusing event flow between Server and all client in one service thread. In this case Server communicates only with one Proxy instance in this thread.
   - Fixed critical issue with invalid useage Mutex.

version 1.3.0
   - Request/Response concept completely reimplemented.
   - Event with no data serialization/deserialization logic implemented to avoid crash in case of data in event is nullptr.
   - Request busy notification implemented.

version 1.2.6
   - Request/Response implementation updated.
   - Template events' static functions signature changed (now in is similar for all of them and has "Signature" instead of a lot of other parameters).

version 1.2.5
   - Macros "INIT_EVENT" and "REGISTER_EVENT" was made universal and single.
   - "Generated" classes from idl redesigned.
   - "Interface" class in framewrok extended by next template methods: create_send_event, get_event_data. This leads to some additional rules for generated stuff from idl files.

version 1.2.4a
   - Small modifications in "application" project.

version 1.2.4
   - Removed "test_app_0" prject
   - Extended "application" project by content from "test_app_0".

version 1.2.3
   - Base interface implementation. Register/unregister server/client logic implemented.
   - "MutexAutoLocker" implemented.

version 1.2.2
   - Renamed "Service" to "ServiceThread".
   - Renamed "ServiceBrocker" to "ServiceBrockerThread".

version 1.2.1
   - Reimplemented example with interface OnOff in "test_app_0".

version 1.2.0
   - "Signature" polymorphic class introduced for events.
   - "Siganture" class is used for key in subscriptions map in "Service".
   - Communication type moved from "TBaseEvent" to "IEvent".
   - Splitted sfinae class "TEvent" and "TGenerator" to different classes ("TEventSimple", "TEventSimpleID" and so on).
   - Removed DSI event concept created by macros "DECLARE_DSI_EVENT", "INIT_DSI_EVENT" and "REGISTER_DSI_EVENT". Corresponding macros also removed.
   - Implemented IPC concept create by macros "DECLARE_IPC_EVENT", "INIT_IPC_EVENT" and "REGISTER_IPC_EVENT". Service type is used only to identify if event supports IPC of not and is not set by user.
   - Removed memory leaks detected by valgrind.
   - New event type "TEventRR".
   - Changed implementation for test request/response to new event type.

version 1.1.2b
   - Renaming class "Event" to class "IEvent".

version 1.1.2a
   - Move "Event" implementation to subfolder "event" in "comm".
   - Rename "/framework/*/sys/Timer" to "/framework/*/sys/timer".

version 1.1.2 (2020-01-17_17-51-45)
   - Created git repository
   - Initial implementation of base parts for "Server", "Client" and "Registry".

version 1.1.2 (2019-12-29_16-01-21)
   - Removed "ServiceBrocker". Send ETC event directly to each service event pull.
   - Renamed "ServiceBrockerDSI" to "ServiceBrocker".
   - Creating event from buffer and buffer from event moved to EventRegistry.
   - Mothods "to_buffer" and "from_buffer" now work identically.
   - Implemented DSI and non DSI request/response examples.

version 1.1.1 (2019-12-21_18-14-44)
   - Added __rdtsc function (CPU ticks)

version 1.1.0 (2019-12-18_10-53-25)
   - Event class was splitted on two: with id and without id.
   - Base event was splitted to several files.
   - Subscription to event by id was added (for request/response concept).
   - Extended request/response concept for DSI support.
   - Implemented "send_to_context" and "create_send_to_context" methods for Event.
   - Implemented "Timer".

version 1.0.2 (2019-12-08_05-45-51)
   - Removed "send_event" depricated method from Service class.
   - class "Event_ID" replaced by typedef "EventTypeID".
   - improved build system.

version 1.0.1 (2019-12-05_10-40-26)
   - Remover OS dependency in Thread, Mutex and ConditionVariable classes. STD implementation was removed.
   - Android os support was implemented.
   - Extended ByteBuffer with implementation for optional.
   - improved build system.
   - coloros in build system.

version 1.0.0 (2019-12-02_19-34-34)
   - introduced python build system.
